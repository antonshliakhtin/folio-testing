#%RAML 1.0

title: Books
version: v0.1
protocols: [ HTTP, HTTPS ]
baseUri: http://localhost

documentation:
  - title: Books API
    content: This documents the API calls that can be made to manage books

types:
  book: !include types/books/book.json
  booksCollection: !include types/books/booksCollection.json
  errors: !include raml-util/schemas/errors.schema

/books:
  displayName: Books
  description: Books collection

  post:
    body:
      application/json:
        type: book
    responses:
      200:
        description: "Success"
        body:
          application/json:
            example: |
              {
                "book":
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440000",
                    "title": "Java for education"
                  }
              }
      201:
        description: "Added"
        headers:
          Location:
            description: URI to the created <<resourcePathName|!singularize>> item
        body:
          application/json:
            example: |
              {
                "book":
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440000",
                    "title": "Java for education"
                  }
              }
      400:
        description: "error"
        body:
          text/plain:
      500:
        description: "error"
        body:
          text/plain:

  get:
    displayName: Books
    description: Books that exists here
    queryParameters:
      query:
        description: |
          A query
        example: |
          (title="Jav*")
        required: false
        type: string
      offset:
        description: skip over a number of elements
        type: integer
        required: false
        example: 0
        default: 0
        minimum: 0
        maximum: 2147483647
      limit:
        description: limit the number of elements returned in the response
        type: integer
        required: false
        example: 10
        default: 10
        minimum: 0
        maximum: 2147483647
    responses:
      200:
        description: "Success"
        body:
          application/json:
            example: |
              {
                "books": [
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440000",
                    "title": "Java for education"
                  },
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440111",
                    "title": "Okapi for education"
                  },
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440222",
                    "title": "Vert.X for education"
                  }
                ]
              }
      400:
        description: "Bad request"
        body:
#          text/plain:
          application/json:
            example: |
              "unable to list booksCollection -- malformed parameter 'query', syntax error at column 99"
#
#  put:
#    queryParameters:
#      access_token:
#        displayName: Access Token
#        type: string
#        description: Token giving you permission to make call
#        required: true
#
#  /{id}:
#    description: Book entity
#    uriParameters:
#      id:
#        pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
#
#    get:
#      description: Retrieve a specific book title `bookId = {bookId}`
#      responses:
#        200:
#          description: "Success"
#          body:
#            application/json:
#              example: |
#                {
#                  "data": {
#                    "bookId": "SmThId",
#                    "title": "Java for education",
#                    "author": "Anton Shliakhtin",
#                    "year": "22.01.1998"
#                  }
#                }
#        401:
#          description: "Not authorized to perform request action"
#          body:
#            application/json:
#              example: |
#                {
#                  "message": "unable to list booksCollection -- unauthorized"
#                }
#        404:
#          description: "Item with a given ID not found"
#          body:
#            application/json:
#              example: |
#                {
#                  "message": "Book not found"
#                }
#        500:
#          description: "Item with a given ID not found"
#          body:
#            application/json:
#              example: |
#                {
#                  "message": "item not found"
#                }
#
#    put:
#      queryParameters:
#        access_token:
#          displayName: Access Token
#          type: string
#          description: Token giving you permission to make call
#          required: true
#
#    delete:
#      queryParameters:
#        access_token:
#          displayName: Access Token
#          type: string
#          description: Token giving you permission to make call
#          required: true
