#%RAML 1.0

title: Books
version: v0.1
protocols: [ HTTP, HTTPS ]
baseUri: http://localhost

documentation:
  - title: Books API
    content: This documents the API calls that can be made to manage books

types:
  book: !include types/books/book.json
  booksCollection: !include types/books/booksCollection.json
  errors: !include raml-util/schemas/errors.schema

/books:
  displayName: Books
  description: Books collection

  post:
    body:
      application/json:
        type: book
    responses:
      201:
        description: "Created"
        headers:
          Location:
            description: URI to the created <<resourcePathName|!singularize>> item
        body:
          application/json:
            example: |
              {
                "id": "91b0673d-5825-474d-9316-5bde21fe19dc",
                "title": "A book title",
                "author": "Firstname Lastname",
                "year": "10.10.2020"
              }
      400:
        description: "Bad Request"
        body:
          application/json:
      401:
        description: "Unauthorized"
        body:
          application/json:
      500:
        description: "Error"
        body:
          application/json:

  get:
    displayName: Books
    description: Books that exists here
    queryParameters:
      query:
        description: |
          A query
        example: |
          (title="Jav*")
        required: false
        type: string
      offset:
        description: skip over a number of elements
        type: integer
        required: false
        example: 0
        default: 0
        minimum: 0
        maximum: 2147483647
      limit:
        description: limit the number of elements returned in the response
        type: integer
        required: false
        example: 10
        default: 10
        minimum: 0
        maximum: 2147483647
    responses:
      200:
        description: "Success"
        body:
          application/json:
            example: |
              {
                "books": [
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440000",
                    "title": "Java for education"
                  },
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440111",
                    "title": "Okapi for education"
                  },
                  {
                    "bookId": "550e8400-e29b-41d4-a716-446655440222",
                    "title": "Vert.X for education"
                  }
                ],
                "totalRecords": 3
              }
      400:
        description: "Bad Request"
        body:
          application/json:
      401:
        description: "Unauthorized"
        body:
          application/json:
      500:
        description: "Error"
        body:
          application/json:

  /{id}:
    description: Book entity
    uriParameters:
      id:
        pattern: "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"

    get:
      description: Retrieve a specific book title `bookId = {bookId}`
      responses:
        200:
          description: "Success"
          body:
            application/json:
              example: |
                {
                  "id": "91b0673d-5825-474d-9316-5bde21fe19dc",
                  "title": "A book title",
                  "author": "Firstname Lastname",
                  "year": "10.10.2020"
                }
        400:
          description: "Bad Request"
          body:
            application/json:
        401:
          description: "Unauthorized"
          body:
            application/json:
        404:
          description: "Item with a given ID not found"
          body:
            application/json:
              example: |
                {
                  "message": "Book not found"
                }
        500:
          description: "Error"
          body:
            application/json:
              example: |
                {
                  "message": "error"
                }

    put:
      body:
        application/json:
          type: book
      responses:
        201:
          description: "Updated"
          body:
            application/json:
        400:
          description: "Bad Request"
          body:
            application/json:
        401:
          description: "Unauthorized"
          body:
            application/json:
        404:
          description: "Item with a given ID not found"
          body:
            application/json:
        500:
          description: "Error"
          body:
            application/json:
              example: |
                {
                  "message": "error"
                }

    delete:
      responses:
        204:
          description: "Deleted"
          body:
            application/json:
        400:
          description: "Bad Request"
          body:
            application/json:
        401:
          description: "Unauthorized"
          body:
            application/json:
        404:
          description: "Item with a given ID not found"
          body:
            application/json:
        500:
          description: "Error"
          body:
            application/json:
              example: |
                {
                  "message": "error"
                }
